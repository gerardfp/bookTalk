html
  head
    title= "searcher"
    link(rel="stylesheet" href="../css/searcherClasses.css")
  body
    h1 Buscador:
    form(autocomplete="off" action="/action_page.php")
        div(class="autocomplete" style="width:300px;")
            input(id="myInput" type="text" name="myCountry" )
        input(type="submit")
script.
    async function populateSearchResults(){
        let result;
        if (document.getElementById("myInput").value.length > 2){
            let searchResults = new Array;
            let searchResult =  new Array;
            let userInput = document.getElementById("myInput").value;
            const responseForBooks = await fetch("/search/books",
            {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({userInput})
            });
            const booksdata = await responseForBooks.json();
            //console.log(booksdata);

            const responseForUsers = await fetch("/search/users",
            {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({userInput})
            });
            const usersdata = await responseForUsers.json();
            //console.log(usersdata);

            const responseForReviews = await fetch("/search/reviews",
            {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({userInput})
            });
            const reviewData = await responseForReviews.json();
            //console.log(reviewData);

            //save all the result in a standard format
            booksdata.forEach(function(entry) {                
                let bookObj = {id: entry._id, name: entry.bookName, colectionName: "book"};
                searchResult.push(bookObj);
            });
            usersdata.forEach(function(entry) {
                let userObj = {id: entry._id, name: entry.username, colectionName: "user"};
                searchResult.push(userObj);
            });
            reviewData.forEach(function(entry) {
                let reviewObj = {id: entry._id, name: entry.reviewTitle, colectionName: "review"};
                searchResult.push(reviewObj);
            });
            //console.log(searchResult);
            return searchResult;
        }
    }    
    document.getElementById("myInput").addEventListener('keyup', async (e) => {
        let searchResults = await populateSearchResults();
        console.log(searchResults);
        if (searchResults != undefined) {
            let arr = searchResults;
            let inp = document.getElementById("myInput");
            /*the autocomplete function takes two arguments,
            the text field element and an array of possible autocompleted values:*/
            var currentFocus;
            //console.log(arr);
            /*execute a function when someone writes in the text field:*/
            inp.addEventListener("input", function(e) {
                var a, b, i, val = this.value;
                /*close any already open lists of autocompleted values*/
                closeAllLists();
                if (!val) { return false;}
                currentFocus = -1;
                /*create a DIV element that will contain the items (values):*/
                a = document.createElement("DIV");
                a.setAttribute("id", this.id + "autocomplete-list");
                a.setAttribute("class", "autocomplete-items");
                /*append the DIV element as a child of the autocomplete container:*/
                this.parentNode.appendChild(a);
                /*for each item in the array...*/
                for (i = 0; i < arr.length; i++) {
                    /*check if the item starts with the same letters as the text field value:*/
                    //console.log(arr[i].name.substr(0, val.length).toUpperCase() + "   " + val.toUpperCase());
                    if (val.toUpperCase() != undefined) {
                        /*create a DIV element for each matching element:*/
                        b = document.createElement("DIV");
                        /*make the matching letters bold:*/
                        b.innerHTML = "<strong>" + arr[i].name + "</strong>";
                        //b.innerHTML += arr[i].substr(val.length);
                        /*insert a input field that will hold the current array item's value:*/
                        //console.log(arr[i]);
                        if (arr[i].colectionName == "user") {
                            b.innerHTML += "<input type='hidden' id='objId' value='" + arr[i].name + "'>";
                            b.innerHTML += "<input type='hidden' id='objType' value='" + arr[i].colectionName + "'>";
                        } else {
                            b.innerHTML += "<input type='hidden' id='objId' value='" + arr[i].id + "'>";
                            b.innerHTML += "<input type='hidden' id='objType' value='" + arr[i].colectionName + "'>";
                        }
                        /*execute a function when someone clicks on the item value (DIV element):*/
                        b.addEventListener("click", function(e) {
                            /*insert the value for the autocomplete text field:*/
                            //inp.value = this.getElementsByTagName("input")[0].value;
                            window.location.href = "/"+document.getElementById("objType").value+"/"+document.getElementById("objId").value;
                            /*close the list of autocompleted values,
                            (or any other open lists of autocompleted values:*/
                            closeAllLists();
                        });
                        a.appendChild(b);
                    }
                }
            });
            /*execute a function presses a key on the keyboard:*/
            inp.addEventListener("keydown", function(e) {
                var x = document.getElementById(this.id + "autocomplete-list");
                if (x) x = x.getElementsByTagName("div");
                if (e.keyCode == 40) {
                    /*If the arrow DOWN key is pressed,
                    increase the currentFocus variable:*/
                    currentFocus++;
                    /*and and make the current item more visible:*/
                    addActive(x);
                } else if (e.keyCode == 38) { //up
                    /*If the arrow UP key is pressed,
                    decrease the currentFocus variable:*/
                    currentFocus--;
                    /*and and make the current item more visible:*/
                    addActive(x);
                } else if (e.keyCode == 13) {
                    /*If the ENTER key is pressed, prevent the form from being submitted,*/
                    e.preventDefault();
                    if (currentFocus > -1) {
                        /*and simulate a click on the "active" item:*/
                        if (x) x[currentFocus].click();
                    }
                }
            });
            function addActive(x) {
                /*a function to classify an item as "active":*/
                if (!x) return false;
                /*start by removing the "active" class on all items:*/
                removeActive(x);
                if (currentFocus >= x.length) currentFocus = 0;
                if (currentFocus < 0) currentFocus = (x.length - 1);
                /*add class "autocomplete-active":*/
                x[currentFocus].classList.add("autocomplete-active");
            }
            function removeActive(x) {
                /*a function to remove the "active" class from all autocomplete items:*/
                for (var i = 0; i < x.length; i++) {
                    x[i].classList.remove("autocomplete-active");
                }
            }
            function closeAllLists(elmnt) {
                /*close all autocomplete lists in the document,
                except the one passed as an argument:*/
                var x = document.getElementsByClassName("autocomplete-items");
                for (var i = 0; i < x.length; i++) {
                    if (elmnt != x[i] && elmnt != inp) {
                        x[i].parentNode.removeChild(x[i]);
                    }
                }
            }
            /*execute a function when someone clicks in the document:*/
            document.addEventListener("click", function (e) {
                closeAllLists(e.target);
            });
        }
        //console.log(searchResults);
    });
